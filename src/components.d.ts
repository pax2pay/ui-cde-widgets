/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Card } from "@pax2pay/model-cde";
import { Error } from "gracely";
import { pax2pay } from "./pax2pay";
import { smoothly } from "smoothly";
export { Card } from "@pax2pay/model-cde";
export { Error } from "gracely";
export { pax2pay } from "./pax2pay";
export { smoothly } from "smoothly";
export namespace Components {
    interface P2pCdeButton {
        "card"?: Card.Token | Error;
        "holder"?: string;
        "nameAlreadyEncoded": boolean;
        "task": "print" | "pdf";
    }
    interface P2pCdeDemo {
        "card"?: pax2pay.Card | string;
    }
    interface P2pCdeDisplay {
        "card"?: Card.Token | Error;
        "feature"?: "copy";
        "labelled"?: boolean;
        "property": "pan" | "csc" | "expires";
    }
    interface P2pCdeInput {
    }
    interface P2pCdeKeyGenerator {
        "generate": () => Promise<string | undefined>;
    }
    interface P2pVirtualCard {
        "card"?: Card.Token | Error;
        "cardHolderName"?: string;
        "company"?: string;
        "height": string;
        "nameAlreadyEncoded": boolean;
        "width": string;
    }
}
export interface P2pCdeDemoCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLP2pCdeDemoElement;
}
declare global {
    interface HTMLP2pCdeButtonElement extends Components.P2pCdeButton, HTMLStencilElement {
    }
    var HTMLP2pCdeButtonElement: {
        prototype: HTMLP2pCdeButtonElement;
        new (): HTMLP2pCdeButtonElement;
    };
    interface HTMLP2pCdeDemoElementEventMap {
        "smoothlyNotify": smoothly.Notice;
    }
    interface HTMLP2pCdeDemoElement extends Components.P2pCdeDemo, HTMLStencilElement {
        addEventListener<K extends keyof HTMLP2pCdeDemoElementEventMap>(type: K, listener: (this: HTMLP2pCdeDemoElement, ev: P2pCdeDemoCustomEvent<HTMLP2pCdeDemoElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLP2pCdeDemoElementEventMap>(type: K, listener: (this: HTMLP2pCdeDemoElement, ev: P2pCdeDemoCustomEvent<HTMLP2pCdeDemoElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLP2pCdeDemoElement: {
        prototype: HTMLP2pCdeDemoElement;
        new (): HTMLP2pCdeDemoElement;
    };
    interface HTMLP2pCdeDisplayElement extends Components.P2pCdeDisplay, HTMLStencilElement {
    }
    var HTMLP2pCdeDisplayElement: {
        prototype: HTMLP2pCdeDisplayElement;
        new (): HTMLP2pCdeDisplayElement;
    };
    interface HTMLP2pCdeInputElement extends Components.P2pCdeInput, HTMLStencilElement {
    }
    var HTMLP2pCdeInputElement: {
        prototype: HTMLP2pCdeInputElement;
        new (): HTMLP2pCdeInputElement;
    };
    interface HTMLP2pCdeKeyGeneratorElement extends Components.P2pCdeKeyGenerator, HTMLStencilElement {
    }
    var HTMLP2pCdeKeyGeneratorElement: {
        prototype: HTMLP2pCdeKeyGeneratorElement;
        new (): HTMLP2pCdeKeyGeneratorElement;
    };
    interface HTMLP2pVirtualCardElement extends Components.P2pVirtualCard, HTMLStencilElement {
    }
    var HTMLP2pVirtualCardElement: {
        prototype: HTMLP2pVirtualCardElement;
        new (): HTMLP2pVirtualCardElement;
    };
    interface HTMLElementTagNameMap {
        "p2p-cde-button": HTMLP2pCdeButtonElement;
        "p2p-cde-demo": HTMLP2pCdeDemoElement;
        "p2p-cde-display": HTMLP2pCdeDisplayElement;
        "p2p-cde-input": HTMLP2pCdeInputElement;
        "p2p-cde-key-generator": HTMLP2pCdeKeyGeneratorElement;
        "p2p-virtual-card": HTMLP2pVirtualCardElement;
    }
}
declare namespace LocalJSX {
    interface P2pCdeButton {
        "card"?: Card.Token | Error;
        "holder"?: string;
        "nameAlreadyEncoded"?: boolean;
        "task"?: "print" | "pdf";
    }
    interface P2pCdeDemo {
        "card"?: pax2pay.Card | string;
        "onSmoothlyNotify"?: (event: P2pCdeDemoCustomEvent<smoothly.Notice>) => void;
    }
    interface P2pCdeDisplay {
        "card"?: Card.Token | Error;
        "feature"?: "copy";
        "labelled"?: boolean;
        "property"?: "pan" | "csc" | "expires";
    }
    interface P2pCdeInput {
    }
    interface P2pCdeKeyGenerator {
    }
    interface P2pVirtualCard {
        "card"?: Card.Token | Error;
        "cardHolderName"?: string;
        "company"?: string;
        "height"?: string;
        "nameAlreadyEncoded"?: boolean;
        "width"?: string;
    }
    interface IntrinsicElements {
        "p2p-cde-button": P2pCdeButton;
        "p2p-cde-demo": P2pCdeDemo;
        "p2p-cde-display": P2pCdeDisplay;
        "p2p-cde-input": P2pCdeInput;
        "p2p-cde-key-generator": P2pCdeKeyGenerator;
        "p2p-virtual-card": P2pVirtualCard;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "p2p-cde-button": LocalJSX.P2pCdeButton & JSXBase.HTMLAttributes<HTMLP2pCdeButtonElement>;
            "p2p-cde-demo": LocalJSX.P2pCdeDemo & JSXBase.HTMLAttributes<HTMLP2pCdeDemoElement>;
            "p2p-cde-display": LocalJSX.P2pCdeDisplay & JSXBase.HTMLAttributes<HTMLP2pCdeDisplayElement>;
            "p2p-cde-input": LocalJSX.P2pCdeInput & JSXBase.HTMLAttributes<HTMLP2pCdeInputElement>;
            "p2p-cde-key-generator": LocalJSX.P2pCdeKeyGenerator & JSXBase.HTMLAttributes<HTMLP2pCdeKeyGeneratorElement>;
            "p2p-virtual-card": LocalJSX.P2pVirtualCard & JSXBase.HTMLAttributes<HTMLP2pVirtualCardElement>;
        }
    }
}
